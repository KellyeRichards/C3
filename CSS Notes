Welcome back to class! Today we're going to get started on the "pretty" portion of web development. But first I have a few questions about HTML. 
       What does HTML stand for?
         Hyper Text Markup Language
       What is the tag you must have at the very top of your code? And what does that tag do?
         <!doctype html> tells the browser what version of html the file is
       What is a boilerplate? VSCode Shortcut?
         template   !
       
Cascading Style Sheet - CSS is a style sheet language used to define the look and layout of web pages. It describes how HTML elements should be displayed on screen. Allows us to control the color, font, size, layout, and other visual aspects of a webpage. Using CSS allows you to create visually appealing and consistent designs across a website, without manually editing each HTML document. 

CSS works by associating a set of properties and values to HTML elements. When an HTML document is loaded in a web browser, the CSS file linked to that document is also loaded, and the browser applies the associated styles to the HTML elements based on their selectors.

Create new file - name it style.css

How to Link css file in html - nav to html file - type link in head section - href = style.css 

Comments use * and /, same shortcut as html comments

Basic syntax of CSS uses selectors, properties and values 
Selectors -  are used to target specific HTML elements for styling. Selectors can be based on element type (e.g. h1, p, img), class (e.g. .my-class), or ID (e.g. #my-element). We'll be going over class and ID in a bit.

Properties - are used to set the style for the selected HTML element. Properties can include things like font size (font-size), background color (background-color), and text color (color).

Values -  are specific settings for properties. For example, if the property is font-size, the value could be 14px.

In CSS, there are several ways to specify colors for your webpage.

   One way is to use a basic color name, such as red, green, blue, yellow, etc. CSS supports 147 different predefined color names.

   Another way is to use a hexadecimal color value, which is a six digit code that represents red, green, and blue (RGB) values of a color. Each pair of characters in the code represents a RGB value, ranging from 00 to FF.
   
   Another option is to use RGB() or RGBA() color functions. This allows you to specify colors using the red, green, and blue (RGB) values of a color, in decimal format from 0 to 255. The RGBA() function allows you to add an alpha value that sets the transparency of a color, with a value ranging from 0 (completely transparent) to 1 (fully opaque).

If you struggle with picking colors and color themes, check out coolors.co

<!-- /* **Go to css file now** -->

<!-- Flexbox -->

Flexbox is a layout module in CSS that enables the creation of flexible and responsive user interfaces. It allows the distribution of space among items inside a container and lets us align, position and rearrange elements with ease.

Flexbox introduces two types of elements - the parent container and the child elements (also called flex items). Using the flex container, we specify the layout of the child elements by defining the flex direction, which instructs how the items should be arranged, and the wrap property, which defines whether the items should be allowed to overflow or wrap into a new row or column.

<!-- &We can also control the size and alignment of the child elements using the following flexbox properties: -->

justify-content: positions the items along the main axis
<!-- align-items: positions the items along the cross axis -->
align-self: overrides the align-items property for a specific item
<!-- flex-grow: determines the amount of space a child element should grow to fill any available space -->
flex-shrink: determines the amount of space a child element should shrink if there is not enough space in the container
<!-- flex-basis: sets the initial size of a child element before any growing or shrinking occurs. -->

Overall, flexbox is a powerful and flexible tool that simplifies the creation of responsive layouts and enables us to easily manage the arrangement and positioning of elements within a container.


<!-- ! *This starts the Class and ID lesson -->

In HTML and CSS, class and id are both useful for selecting and styling elements, but they serve different purposes.

A class is a way to group elements together that share specific attributes or styles. You can apply a class to one or multiple HTML elements, and the same class can be used repeatedly throughout your HTML document. This is useful when you want to apply a particular set of styles or attributes to multiple elements on a page but not necessarily to all elements of the same type. For example, you can use a class to give individual styling to different sections of a webpage.
      --Example-- Go to html and add the class; go to style and create class properties
   <h2 class="icecream">Favorite Ice Cream Flavors</h2>
   <h2 class="colors">Favorite Colors</h2>

On the other hand, an id is used to uniquely identify a specific HTML element on a page. Unlike with a class, each id should be unique to a single element. You would typically use an id when you want to apply specific styles or attributes to an individual HTML element. For example, you might use an id to give a unique style to the navigation bar for your website.
      --Example-- Go to html then css to add/mod IDs
      

In general, it's a good practice to use a class when you want to apply the same styles to multiple elements, while using an id when you want to apply unique styles to individual elements. However, it's important to keep in mind that overuse of id selectors can lead to code duplication and make the code more difficult to maintain.

Overall, while there may not always be a clear-cut distinction between when to use class versus id, it's important to use each appropriately for the best organization and readability of your code.

<!-- !Parent and child elements -->
Parent and child elements are terms used in HTML and CSS to describe the relationship between nested elements. A parent element is an element that contains another element inside it. The contained element is called a child element. For example, if you have an HTML document with a "div" element that contains an "h1" element, the "div" is the parent element and the "h1" is the child element.

Think of a parent element as a container that wraps around one or more child elements. This means that any styles or properties applied to the parent element will also affect the child elements it contains. For example, if you set a background color on a div element, any text or other elements inside the div will have that background color as well.

Child elements, on the other hand, inherit properties from their parent elements. This means that any styles or properties applied to the parent element will be passed down to the child elements. However, child elements can also have their own styles and properties that override the styles inherited from the parent element.

Understanding the parent-child relationship is important in HTML and CSS, as it allows you to control the layout and appearance of your web pages by applying styles to specific elements. It also helps you organize your code and structure your content in a way that makes sense.

<!-- !Divs and Spans -->
Divs and spans are essential HTML elements because they provide a way to group and format the content on a web page. Here are some specific reasons why you might use divs and spans:

Structure and organization: Divs provide a way to group related content together and create a logical structure for the page. They can be used to create different sections of the page such as header, main content, footer, sidebar, etc.

Styling and layout: Divs and spans can be used to apply CSS styles to the content on the page. For example, you can add a background color, padding, margin, border, and other properties to a div or span to control its appearance and layout.

Responsive design: Divs and spans are often used in combination with responsive design techniques to create layouts that adapt to different screen sizes. For example, you can use divs to create a grid system for the page, and use media queries to adjust the layout based on the screen size.

Accessibility: Divs and spans can be used to add semantic meaning to the content on the page, which can improve accessibility for users with disabilities. For example, you can use a div to wrap around a section of the page and add a "role" attribute to indicate its purpose, such as "header" or "navigation".

JavaScript and jQuery: Divs and spans are frequently used in JavaScript and jQuery code to select and manipulate elements on the page. They can be used to add event listeners, modify the content of the page, or create dynamic effects.

Overall, divs and spans provide a flexible and powerful way to structure and format the content on a web page. They are essential tools for web developers and designers and can be used in many different ways to create visually appealing and accessible websites.

