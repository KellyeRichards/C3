Welcome to class! This week we're going to be going over basic HTML, CSS, and Javascript! Does anyone have any experience using any of these? How about MacOS? No worries if you don't, because we'll be going over everything you need to make a website. Just a few rules: you can have drinks, but please be careful and use closed containers; keep the area clean and throw trash away at the end of the day; Only use the computer for class related things, please. Student code of conduct. Right outside of the classroom, there are vending machines, water fountains, and bathrooms. We're going to try to time breaks on the hour at 10 and 11 and finish up a little early to answer questions and work on the week's final project!

Icebreaker game - 

Okay! Let's get started! This week, we'll be using MacBooks. MacOS is a little different than Windows, if that's what you're used to. Let's go ahead and sign in, the user account is student and the password is password. On the desktop, you'll see the dock at the bottom. The first icon is the finder. It's like windows file explorer. The main apps we'll be using are VSCode (point it out) and Google Chrome. All of our work is going to be kept in a folder on the desktop. Let's go ahead and create that by right clicking on the desktop (2 fingers on the touch pad, push 2nd finger down), new folder, name it webdevelopment all one word. Casing does not matter when creating an HTML folder, as most operating systems are not case sensitive when it comes to file and folder names. However, it is a best practice to use all lowercase letters when naming folders and files in HTML projects to avoid confusion and potential errors, as this is a common in web development. Also, it is recommended to use clear and descriptive names for folders to make it easier to identify their contents, such as "css" for stylesheet files, "img" for image files, and "js" for JavaScript files. Once we have our folders created, lets open VSCode.

(While VSC is opening, read this) Visual Studio Code (VSCode) is a popular code editor that can be used for HTML, CSS, and JavaScript development. It offers various features like syntax highlighting, code completion, debugging, and extensive plugin support. It enables developers to build web applications more efficiently and effectively. VSCode also supports Git integration, which makes version control and collaboration among team members more accessible. 

On the left of the screen, you'll see the Explorer Icon, which is what we'll be using the most. If you hover over the other icons, it'll tell you what they are. Remember the folder we just created? Now we're going to open it in our workspace: open folder, navigate to desktop, click on webdevelopment, click open. The first file we'll create is an index.html file. Click on the new file icon (paper with + sign), type index.html. It'll open over in the editor window. Now, you can name your file anything you want and it'll work, but to make sure there aren't any issues opening it, it's best practice to use index.html as your main html page. **We can go ahead and minimize the explorer by clicking on the icon or shortcut, command + b, because we only need the index.html file for today.

Can anyone tell me what HTML stands for?

HTML stands for Hypertext Markup Language. It is a markup language used to create and structure the content of web pages. HTML consists of various tags that mark up different elements of a web page, such as headings, paragraphs, and images.

The structure of an HTML document is like a skeleton, it outlines the content of a website without necessarily defining how it should look. It tells the web browser what content should be on a webpage and how it should be structured, but it doesn't specify anything about the visual or dynamic aspects of the page (like colors, images, or animations).

HTML is the backbone of most websites and is essential for creating websites that can be accessed on the internet. Once you have a basic understanding of HTML, you can add more advanced features like CSS and JavaScript to create more complex, interactive websites.

<!-- **Go to html file comments** -->

Elements are typically divided into two categories: block-level elements and inline elements.

Block-level elements are used to create larger structures on a web page, such as paragraphs, headings, lists, and sections. These elements start on a new line and take up the full width of their container by default. The content inside a block-level element may contain other block-level or inline elements.

<!-- ? Here are some examples of block-level elements: -->

<p>: creates a paragraph of text
<h1>-<h6>: creates headings of different levels
<ul>, <ol>, <li>: creates an unordered or ordered list with list items
<div>: creates a division or section of a web page

Inline elements, on the other hand, are used for small pieces of content that are contained within a larger block-level element, such as text and images. They do not start on a new line and only take up as much width as necessary to display their content. Inline elements cannot contain block-level elements, but can contain other inline elements.


<!--? Here are some examples of inline elements: -->

<span>: used to apply styles to small pieces of text
<a>: creates a hyperlink to another location
<img>: inserts an image into the content
<strong> and <em>: used to indicate emphasis in text
<!-- !It's important to understand the differences between block-level and inline elements, as they behave differently when it comes to positioning, layout, and styling. Knowing how to apply these elements correctly can help you create more organized and structured web pages. -->
