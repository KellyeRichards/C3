<!-- <script src="script.js"></script> -->
History:

JavaScript was created by Brendan Eich in 1995 while he was working at Netscape Communications Corporation. Its initial name was Mocha, then changed to LiveScript, and finally became JavaScript.It was created as a way to add interactivity to websites, such as dynamic interfaces and effects.

Purpose:

JavaScript is a core technology of the World Wide Web, alongside HTML and CSS. JavaScript is used mostly for client-side web development, making it an essential part of web development. It allows developers to create interactive and dynamic user interfaces, including animations and multimedia. It can also be used for server-side programming with Node.js, making it a versatile language for web application development.

Advantages:

JavaScript is a widely used programming language with a large and active community.
It is supported by all modern web browsers, making it accessible to a vast range of users.
JavaScript can be used for a variety of different tasks, from simple scripting tasks to complex application development.
It is easy to learn for beginners, yet powerful enough for advanced developers.
With JavaScript, developers can reduce server load by performing tasks on the client-side.

<!-- ** -->

Introduction to the browser console, debugging, and the basics of syntax
Understanding how to use the browser console for debugging and the basics of syntax is crucial when working with JavaScript. 

<!-- Browser Console: -->
The browser console is a tool within the web browser that allows developers to test, debug, and troubleshoot JavaScript code.
It can be accessed by opening the web browser's developer tools or by using the keyboard shortcut Cmd + Opt + I on Mac.
The console provides access to the global window object and allows developers to execute JavaScript code directly within
the console.

<!-- Debugging: -->
Debugging is a process of identifying and fixing errors or bugs in a program.
The browser console allows developers to see error messages and stack traces, as well as set breakpoints and step through code to identify and fix errors.
It is important to test and debug JavaScript code before deploying it to ensure the application runs smoothly and
efficiently.

<!-- Basics of syntax: -->
All programming languages have a specific syntax that defines the rules for writing code.
In JavaScript, syntax includes keywords, variables, functions, operators, and literals.
Understanding the basics of syntax is crucial to write correct and efficient JavaScript code.
Overall, learning how to effectively use browser console for debugging and understanding the basics of syntax can help developers write better JavaScript code that is more efficient and effective.

<!-- basic console commands in JavaScript that you can use in the browser console: -->

console.log():
 This command is used to display information in the console. The information can be a string, variable, object or any other type of data.
   Syntax: console.log('Hello, World!');
console.error():
 This command is used to display error messages in the console.
   Syntax: console.error('This is an error!');
console.warn():
 This command is used to show warning messages in the console.
   Syntax: console.warn('This is a warning!');
console.clear():
 This command is used to clear the console.
   Syntax: console.clear();
console.table():
 This command displays data in the form of a table in the console.
   Syntax: console.table(['apple', 'banana', 'orange']);

<!-- ** -->
<!-- &In JavaScript, the alert() and prompt() functions can be used to create dialog boxes in the browser for displaying messages to the user or for obtaining input from the user.  -->

Here's an explanation of the different functions:
   
alert():
  The alert() function displays a message in a dialog box with an 'ok' button.
   Syntax: alert('This is an alert message!');
prompt():
  The prompt() function displays a message in a dialog box and allows the user to enter input.
   Syntax: let userInput = prompt('Please enter your name:');
confirm():
  The confirm() function displays a message in a dialog box with 'ok' and 'cancel' buttons. It returns true if the 'ok' button is clicked and false if the 'cancel' button is clicked.
   Syntax: let userConfirmation = confirm('Are you sure you want to delete this file?');


<!--  -->
Variables: In JavaScript, variables are used to store data values. You can create a variable using the var, let, or const keyword followed by the variable name.

Data Types: JavaScript has five primitive data types which are string, number, boolean, undefined, and null. In addition to these, there are object, array, and function data types.

Operators: JavaScript has different types of operators such as arithmetic operators, assignment operators, comparison operators, and logical operators. These are used to perform different operations like addition, subtraction, comparison,
and more.

Control Structures: JavaScript has control structures like conditional statements (if/else) and loops (for, while, do-while). These are used to control the flow of the program.

Functions: Functions are blocks of code that can be executed multiple times in a program. You can define a function using the function keyword.

Objects: JavaScript is an object-oriented programming language and has object data type. Objects are created by defining properties and methods in them.

Events and Event Handlers: JavaScript has an event model that enables you to add interactivity to web pages. You can register event handlers on different elements, which trigger when the corresponding event occurs.

These are some of the fundamentals of JavaScript. By mastering these concepts, you can build more complex applications and functionalities using JavaScript.

<!-- 5 primitive data types -->
String data type is used to represent a sequence of characters. It is enclosed in single or double quotes.
let myString = 'Hello, World!';
console.log(myString); // Output: Hello, World!

Number data type is used to represent a numeric value. It can be an integer or a floating-point value.
let myNumber = 10;
console.log(myNumber); // Output: 10

Boolean data type is used to represent true and false values.
let isTrue = true;
console.log(isTrue); // Output: true
let isFalse = false;
console.log(isFalse); // Output: false

Undefined data type is used to represent a variable that has no value assigned to it.
let myUndefinedVar;
console.log(myUndefinedVar); // Output: undefined

Null data type is used to represent an intentional absence of any object value.
let myNullVar = null;
console.log(myNullVar); // Output: null

These examples show how you can create variables of five primitive data types in JavaScript. The console.log() method is used to print the value of the variable in the console for demonstration purposes.

<!-- Operators -->
Arithmetic Operators:
let x = 10;
let y = 5;
console.log(x + y); // Output: 15
console.log(x - y); // Output: 5
console.log(x * y); // Output: 50
console.log(x / y); // Output: 2
console.log(x % y); // Output: 0

Assignment Operators:
let x = 10;
x += 5; // equivalent to x = x + 5
console.log(x); // Output: 15

let y = 20;
y -= 10; // equivalent to y = y - 10
console.log(y); // Output: 10

<!-- ?Comparison Operators: -->
let x = 10;
let y = 5;
console.log(x > y); // Output: true
console.log(x < y); // Output: false 
console.log(x==y); // Output: false 
console.log(x>= y); // Output: true
console.log(x <= y); // Output: false 
console.log(x !=y); // Output: true

<!-- Logical Operators -->
In JavaScript, logical operators are used to evaluate boolean expressions. There are three logical operators: && (and),
|| (or), and ! (not). Here are some examples of logical operators in JavaScript:

<!-- And operator (&&): -->
It returns true if both operands are true, and false otherwise.
Example:
let x = 6;
let y = 10;
if (x > 5 && y < 11) { console.log("Both conditions are true."); } else { console.log("At least one condition is false."); } 
 
<!-- Or operator (||):  -->
It returns true if at least one of the operands is true, and false otherwise. Example:
 let x=6; let y=10; if (x> 5 || y > 11) {
 console.log("At least one condition is true.");
 } else {
 console.log("Both conditions are false.");
 }

<!-- Not operator (!): -->
It negates the value of its operand. If the operand is true, it returns false, and if it's false, it returns true.
 Example:
 let x = 7;
 if (!(x === 5)) {
 console.log("x is not equal to 5.");
 } else {
 console.log("x is equal to 5.");
 }
Overall, logical operators are used to create more complex expressions that evaluate boolean conditions. They can be used alone or in combination with other operators to create more sophisticated logic in JavaScript.


<!-- String Concatenation Operator: -->
let firstName = 'John';
let lastName = 'Doe';
let fullName = firstName + ' ' + lastName;
console.log(fullName); // Output: John Doe

These examples show how operators can be used in JavaScript to perform various operations such as arithmetic, comparison, assignment, logical, and string concatenation.

<!-- Concatenation in JavaScript is the process of joining two or more strings together to create a new string. In JavaScript, you can concatenate strings using the + operator or the concat() method.  -->

Here are examples of how to concatenate strings using both methods:

<!--  Using the + operator -->
let firstName = "John";
let lastName = "Doe";
let fullName = firstName + " " + lastName;
console.log(fullName); // Outputs "John Doe"

 <!-- Using the concat() method -->
let firstWord = "Hello";
let secondWord = "World";
let phrase = firstWord.concat(" ", secondWord);
console.log(phrase); // Outputs "Hello World"

In the above examples, two or more strings are combined to create a new string. When using the + operator, you can concatenate multiple strings by adding them together with + in between. You can also add a space or any other character between the strings by including it in quotes.

When using the concat() method, you can pass one or more strings as arguments to the method. The method then combines all of the strings together to create a new string.

Concatenation is useful when you want to create dynamic text strings in your JavaScript code, such as when displaying messages to the user or creating HTML content dynamically on a webpage.

<!-- examples to explain control structures in JavaScript: -->

<!-- Conditional Statements: -->
Conditional statements are used to execute different blocks of code based on different conditions. The if statement
checks for a single condition, and the if/else statement checks for two conditions. Here's an example:
let age = 18;
if (age >= 18) {
console.log("You are an adult");
} else {
console.log("You are not an adult yet");
}

In the above example, the program checks if the age variable is greater than or equal to 18. If the condition is true,
it executes the code block inside the if statement, which outputs "You are an adult". If the condition is false, it
executes the code block inside the else statement, which outputs "You are not an adult yet".

<!-- Loops: -->
Loops are used to repeat a statement or code block multiple times. The for loop is used when the number of iterations is known beforehand. The while loop is used when the number of iterations is not known beforehand. The do-while loop issimilar to the while loop but executes the code block at least once even if the condition is false. Here are examples of each loop:

 <!-- for loop -->
for (let i = 0; i < 5; i++) 
 { console.log(i); 
} 

 <!-- while loop  -->
let j=0; 
while (j < 5) 
{ 
 console.log(j); 
 j++; 
} 

<!--  do-while loop  -->
let k=0; 
do { 
 console.log(k);
 k++; 
} while (k < 5);

In the above examples, the for loop runs for 5 iterations starting from 0 and going up to 4, and outputs the value of i variable each time. The while loop and do-while loop also output the value of j and k for 5 iterations, respectively.

<!--!Functions -->
<!-- Function Declaration: -->
A function can be declared using the function keyword, followed by the function name and parameters (if any). Here's an
example:

function greet(name) {
console.log("Hello, " + name + "!");
}
greet("John"); // Output: Hello, John!
In the above example, the greet() function takes a parameter name and outputs "Hello, " followed by the value of name.

<!-- Function Expression: -->
A function can also be created by assigning a function to a variable. Here's an example:

let greet = function(name) {
console.log("Hello, " + name + "!");
};
greet("John"); // Output: Hello, John!

In the above example, the function is assigned to the greet variable, and the function is called by passing the name
parameter.

<!-- Arrow Function: -->
An arrow function is a shorthand way to write a function using an arrow (=>) notation. Here's an example:

let greet = (name) => {
console.log("Hello, " + name + "!");
};
greet("John"); // Output: Hello, John!

In the above example, an arrow function is used to define the greet function, which accepts name parameter and outputs
"Hello, " followed by the value of name.

<!-- Returning a Value: -->
Functions can also return a value using the return keyword. Here's an example:

function add(a, b) {
return a + b;
}
let result = add(5, 10);
console.log(result); // Output: 15

In the above example, the add() function returns the sum of a and b. The result variable is assigned the returned value when the function is called with arguments 5 and 10.

These are some examples of functions in JavaScript. By using functions, you can break your code into reusable and modular pieces, making your code more efficient and easier to manage.

<!-- Objects -->
<!-- Object Literal: -->
An object literal is the simplest way to create an object in JavaScript. Here's an example:

let person = {
firstName: "John",
lastName: "Doe",
age: 30,
address: {
street: "123 Main St",
city: "New York",
state: "NY",
zip: "10001"
},
fullName: function() {
return this.firstName + " " + this.lastName;
}
};

console.log(person.firstName); // Output: John
console.log(person.address.city); // Output: New York
console.log(person.fullName()); // Output: John Doe
In the above example, the person object is created with properties such as firstName, lastName, age, address, and a
function fullName(). The person object has an address sub-object with properties street, city, state, and zip. You can
access the object properties using dot notation.

<!-- Constructor Function: -->
You can also create an object using a constructor function and the new keyword. Here's an example:

function Person(firstName, lastName, age) {
this.firstName = firstName;
this.lastName = lastName;
this.age = age;
this.fullName = function() {
return this.firstName + " " + this.lastName;
}
}

let person1 = new Person("John", "Doe", 30);
let person2 = new Person("Jane", "Doe", 25);

console.log(person1.firstName); // Output: John
console.log(person1.fullName()); // Output: John Doe
console.log(person2.firstName); // Output: Jane
console.log(person2.fullName()); // Output: Jane Doe

In the above example, the Person constructor function is used to create two instances of the Person object, person1 and
person2. The Person constructor function has properties such as firstName, lastName, age, and a function fullName(). You
can access object properties and functions using dot notation.

These are examples of creating objects in JavaScript using object literals and constructor functions. By creating
objects, you can store related data and functions in a single entity and organize your code in a more modular way.

<!-- Events and Event Handlers -->

